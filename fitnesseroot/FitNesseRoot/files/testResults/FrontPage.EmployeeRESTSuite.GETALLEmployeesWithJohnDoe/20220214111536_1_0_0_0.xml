<?xml version="1.0"?>
<testResults>
  <FitNesseVersion>v20211030</FitNesseVersion>
  <rootPath>FrontPage.EmployeeRESTSuite.GETALLEmployeesWithJohnDoe</rootPath>
  <result>
    <counts>
      <right>3</right>
      <wrong>0</wrong>
      <ignores>0</ignores>
      <exceptions>0</exceptions>
    </counts>
    <date>2022-02-14T11:15:36-07:00</date>
    <runTimeInMillis>19</runTimeInMillis>
    <content>&lt;br/&gt;&lt;span class="meta"&gt;variable defined: TEST_SYSTEM=slim&lt;/span&gt;
&lt;br/&gt;&lt;span class="meta"&gt;classpath: target/dependencies/*.jar&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;Import&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;&lt;span class="pass"&gt;smartrics.rest.fitnesse.fixture&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;&lt;span class="pass"&gt;Table: Rest Fixture&lt;/span&gt;&lt;/td&gt;
		&lt;td colspan="4"&gt;&lt;a href="http://localhost:8088"&gt;http://localhost:8088&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;GET&lt;/td&gt;
		&lt;td&gt;&lt;div&gt;&lt;a href='http://localhost:8088/employees'&gt;/employees&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class="pass"&gt;&lt;div&gt;200&lt;/div&gt;&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class="pass"&gt;&lt;div&gt;Content-Type&amp;nbsp;:&amp;nbsp;application/json&lt;br/&gt;&lt;i&gt;&lt;span class='fit_label'&gt;expected&lt;/span&gt;&lt;/i&gt;&lt;hr/&gt;&lt;br/&gt;Access-Control-Allow-Origin&amp;nbsp;:&amp;nbsp;*&lt;br/&gt;Access-Control-Allow-Methods&amp;nbsp;:&amp;nbsp;POST,&amp;nbsp;GET,&amp;nbsp;PUT,&amp;nbsp;OPTIONS,&amp;nbsp;DELETE,&amp;nbsp;PATCH&lt;br/&gt;Access-Control-Max-Age&amp;nbsp;:&amp;nbsp;3600&lt;br/&gt;Access-Control-Allow-Headers&amp;nbsp;:&amp;nbsp;Origin,&amp;nbsp;Content-Type,&amp;nbsp;Accept&lt;br/&gt;Access-Control-Expose-Headers&amp;nbsp;:&amp;nbsp;Location&lt;br/&gt;Content-Type&amp;nbsp;:&amp;nbsp;application/json&lt;br/&gt;Transfer-Encoding&amp;nbsp;:&amp;nbsp;chunked&lt;br/&gt;Date&amp;nbsp;:&amp;nbsp;Mon,&amp;nbsp;14&amp;nbsp;Feb&amp;nbsp;2022&amp;nbsp;18:15:36&amp;nbsp;GMT&lt;br/&gt;&lt;i&gt;&lt;span class='fit_label'&gt;actual&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;div&gt;[{"id":24,"firstName":"John","lastName":"Doe","age":35,"noOfChildrens":0,"spouse":false,"address":null,"phoneNumbers":[],"hobbies":[]}]&lt;/div&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
</content>
    <relativePageName>GETALLEmployeesWithJohnDoe</relativePageName>
    <instructions>
      <instructionResult>
        <instruction>{id='import_0_0', instruction='import', path='smartrics.rest.fitnesse.fixture'}</instruction>
        <slimResult>pass(smartrics.rest.fitnesse.fixture)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>import_0_0</instructionId>
          <col>0</col>
          <row>1</row>
          <type>ImportExpectation</type>
          <evaluationMessage>smartrics.rest.fitnesse.fixture</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='tableTable_1_0', instruction='make', instanceName='tableTable_1', className='RestFixture', args=[&lt;a href="http://localhost:8088"&gt;http://localhost:8088&lt;/a&gt;]}</instruction>
        <slimResult>pass(Table: Rest Fixture)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>tableTable_1_0</instructionId>
          <col>0</col>
          <row>0</row>
          <type>ConstructionExpectation</type>
          <evaluationMessage>Table: Rest Fixture</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='tableTable_1_1', instruction='call', instanceName='tableTable_1', methodName='doTable', args=[[[GET, /employees, 200, Content-Type : application/json, ]]]}</instruction>
        <slimResult>pass()</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>tableTable_1_1</instructionId>
          <type>TableTableExpectation</type>
        </expectation>
      </instructionResult>
    </instructions>
  </result>
  <executionLog>
    <testSystem></testSystem>
    <command></command>
    <exitCode>0</exitCode>
    <stdOut>11:15:36,596 DEBUG [DefaultHttpParams] - Set parameter http.socket.timeout = 3000

11:15:36,596 DEBUG [DefaultHttpParams] - Set parameter http.socket.timeout = 3000

11:15:36,597 DEBUG [HttpClient] - enter HttpClient.executeMethod(HttpMethod)

11:15:36,597 DEBUG [HttpClient] - enter HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)

11:15:36,597 DEBUG [HttpMethodDirector] - Attempt number 1 to process request

11:15:36,597 DEBUG [HttpConnection] - enter HttpConnection.open()

11:15:36,597 DEBUG [HttpConnection] - Open connection to localhost:8088

11:15:36,598 DEBUG [HttpMethodBase] - enter HttpMethodBase.execute(HttpState, HttpConnection)

11:15:36,598 DEBUG [HttpMethodBase] - enter HttpMethodBase.writeRequest(HttpState, HttpConnection)

11:15:36,598 DEBUG [HttpMethodBase] - enter HttpMethodBase.writeRequestLine(HttpState, HttpConnection)

11:15:36,598 DEBUG [HttpMethodBase] - enter HttpMethodBase.generateRequestLine(HttpConnection, String, String, String, String)

11:15:36,598 DEBUG [HttpConnection] - enter HttpConnection.print(String)

11:15:36,598 DEBUG [HttpConnection] - enter HttpConnection.write(byte[])

11:15:36,598 DEBUG [HttpConnection] - enter HttpConnection.write(byte[], int, int)

11:15:36,598 DEBUG [HttpMethodBase] - enter HttpMethodBase.writeRequestHeaders(HttpState,HttpConnection)

11:15:36,598 DEBUG [HttpMethodBase] - enter HttpMethodBase.addRequestHeaders(HttpState, HttpConnection)

11:15:36,598 DEBUG [HttpMethodBase] - enter HttpMethodBase.addUserAgentRequestHeaders(HttpState, HttpConnection)

11:15:36,598 DEBUG [HttpMethodBase] - enter HttpMethodBase.addHostRequestHeader(HttpState, HttpConnection)

11:15:36,598 DEBUG [HttpMethodBase] - Adding Host request header

11:15:36,598 DEBUG [HttpMethodBase] - enter HttpMethodBase.addCookieRequestHeader(HttpState, HttpConnection)

11:15:36,598 DEBUG [HttpState] - enter HttpState.getCookies()

11:15:36,598 DEBUG [CookieSpec] - enter CookieSpecBase.match(String, int, String, boolean, Cookie[])

11:15:36,599 DEBUG [HttpMethodBase] - enter HttpMethodBase.addProxyConnectionHeader(HttpState, HttpConnection)

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.print(String)

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.write(byte[])

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.write(byte[], int, int)

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.print(String)

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.write(byte[])

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.write(byte[], int, int)

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.writeLine()

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.write(byte[])

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.write(byte[], int, int)

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.flushRequestOutputStream()

11:15:36,599 DEBUG [HttpMethodBase] - enter HttpMethodBase.readResponse(HttpState, HttpConnection)

11:15:36,599 DEBUG [HttpMethodBase] - enter HttpMethodBase.readStatusLine(HttpState, HttpConnection)

11:15:36,599 DEBUG [HttpConnection] - enter HttpConnection.readLine()

11:15:36,599 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,599 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,604 DEBUG [HttpMethodBase] - enter HttpMethodBase.readResponseHeaders(HttpState,HttpConnection)

11:15:36,604 DEBUG [HttpConnection] - enter HttpConnection.getResponseInputStream()

11:15:36,604 DEBUG [HttpParser] - enter HeaderParser.parseHeaders(InputStream, String)

11:15:36,604 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,605 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,605 DEBUG [HttpMethodBase] - enter HttpMethodBase.processResponseHeaders(HttpState, HttpConnection)

11:15:36,605 DEBUG [HttpMethodBase] - enter HttpMethodBase.processCookieHeaders(Header[], HttpState, HttpConnection)

11:15:36,605 DEBUG [HttpMethodBase] - enter HttpMethodBase.readResponseBody(HttpState, HttpConnection)

11:15:36,605 DEBUG [HttpMethodBase] - enter HttpMethodBase.readResponseBody(HttpConnection)

11:15:36,605 DEBUG [HttpConnection] - enter HttpConnection.getResponseInputStream()

11:15:36,606 DEBUG [HttpMethodBase] - enter HttpMethodBase.canResponseHaveBody(int)

11:15:36,606 DEBUG [HeaderElement] - enter HeaderElement.parseElements(String)

11:15:36,606 DEBUG [HeaderElement] - enter HeaderElement.parseElements(char[])

11:15:36,606 DEBUG [HttpConnection] - enter HttpConnection.isResponseAvailable(int)

11:15:36,606 WARN  [HttpMethodBase] - Going to buffer response body of large or unknown size. Using getResponseBodyAsStream instead is recommended.

11:15:36,606 DEBUG [HttpMethodBase] - Buffering response body

11:15:36,606 DEBUG [HttpParser] - enter HeaderParser.parseHeaders(InputStream, String)

11:15:36,606 DEBUG [HttpParser] - enter HttpParser.readLine(InputStream, String)

11:15:36,606 DEBUG [HttpParser] - enter HttpParser.readRawLine()

11:15:36,606 DEBUG [HttpMethodBase] - Resorting to protocol version default close connection policy

11:15:36,606 DEBUG [HttpMethodBase] - Should NOT close connection, using HTTP/1.1

11:15:36,606 DEBUG [HttpConnection] - enter HttpConnection.isResponseAvailable()

11:15:36,606 DEBUG [HttpConnection] - enter HttpConnection.releaseConnection()

11:15:36,606 DEBUG [HttpConnection] - Releasing connection back to connection manager.

</stdOut>
    <stdErr></stdErr>
  </executionLog>
  <finalCounts>
    <right>1</right>
    <wrong>0</wrong>
    <ignores>0</ignores>
    <exceptions>0</exceptions>
  </finalCounts>
  <totalRunTimeInMillis>19</totalRunTimeInMillis>
</testResults>

