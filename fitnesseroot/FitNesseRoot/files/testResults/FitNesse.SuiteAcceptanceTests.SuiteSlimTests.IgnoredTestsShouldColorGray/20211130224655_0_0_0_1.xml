<?xml version="1.0"?>
<testResults>
  <FitNesseVersion>v20211030</FitNesseVersion>
  <rootPath>FitNesse.SuiteAcceptanceTests.SuiteSlimTests.IgnoredTestsShouldColorGray</rootPath>
  <result>
    <counts>
      <right>0</right>
      <wrong>0</wrong>
      <ignores>0</ignores>
      <exceptions>23</exceptions>
    </counts>
    <date>2021-11-30T22:46:55-07:00</date>
    <runTimeInMillis>28</runTimeInMillis>
    <content>&lt;div class="collapsible closed"&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='#' class='expandall'&gt;Expand&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='#' class='collapseall'&gt;Collapse&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
	&lt;p class="title"&gt;Included page: &lt;a href="FitNesse.SuiteAcceptanceTests.ScenarioLibrary"&gt;.FitNesse.SuiteAcceptanceTests.ScenarioLibrary&lt;/a&gt; &lt;a href="FitNesse.SuiteAcceptanceTests.ScenarioLibrary?edit&amp;amp;redirectToReferer=true&amp;amp;redirectAction=" class="edit"&gt;(edit)&lt;/a&gt;&lt;/p&gt;
	&lt;div&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;given page&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;create page&lt;/td&gt;
		&lt;td&gt;@page&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td colspan="2"&gt;@content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td&gt;$IT=&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td colspan="3"&gt;@page&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;given page&lt;/td&gt;
		&lt;td colspan="2"&gt;page&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor2"&gt;
		&lt;td&gt;given page&lt;/td&gt;
		&lt;td&gt;@page&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td&gt;nothing&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;$CONTENT=&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td colspan="2"&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;given test page&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor2"&gt;
		&lt;td&gt;given page&lt;/td&gt;
		&lt;td colspan="2"&gt;@page&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td&gt;make&lt;/td&gt;
		&lt;td&gt;@page&lt;/td&gt;
		&lt;td&gt;a test page&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;given slim test page&lt;/td&gt;
		&lt;td colspan="2"&gt;page&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor2"&gt;
		&lt;td&gt;given page&lt;/td&gt;
		&lt;td&gt;@page&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td&gt;!define TEST_SYSTEM {slim}&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td&gt;make&lt;/td&gt;
		&lt;td&gt;@page&lt;/td&gt;
		&lt;td colspan="2"&gt;a test page&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;should have link to&lt;/td&gt;
		&lt;td&gt;target&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td colspan="3"&gt;&amp;lt;a href="@target"&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td&gt;$IT=&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td colspan="3"&gt;@source&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;it should have link to&lt;/td&gt;
		&lt;td colspan="2"&gt;target&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td&gt;should have link to&lt;/td&gt;
		&lt;td&gt;@target&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and it should have link to&lt;/td&gt;
		&lt;td colspan="2"&gt;target&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td&gt;should have link to&lt;/td&gt;
		&lt;td&gt;@target&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;should have creating link to&lt;/td&gt;
		&lt;td&gt;target&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td colspan="3"&gt;@target&amp;lt;a title="create page" href="@target?edit&amp;amp;nonExistent=true"&amp;gt;[?]&amp;lt;/a&amp;gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;it should have creating link to&lt;/td&gt;
		&lt;td colspan="2"&gt;target&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td&gt;should have creating link to&lt;/td&gt;
		&lt;td&gt;@target&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;should contain&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td colspan="3"&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="4"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;should not contain&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor7"&gt;
		&lt;td&gt;reject&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td colspan="3"&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="4"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;should match&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td colspan="3"&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="4"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;it should contain&lt;/td&gt;
		&lt;td colspan="2"&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td&gt;should contain&lt;/td&gt;
		&lt;td&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;it should not contain&lt;/td&gt;
		&lt;td colspan="2"&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td&gt;should not contain&lt;/td&gt;
		&lt;td&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;it should contain&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
		&lt;td&gt;in line&lt;/td&gt;
		&lt;td&gt;symbol&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;$@symbol=&lt;/td&gt;
		&lt;td&gt;line number containing&lt;/td&gt;
		&lt;td colspan="3"&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;it should match&lt;/td&gt;
		&lt;td colspan="2"&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td&gt;should match&lt;/td&gt;
		&lt;td&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;test results for page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;should contain&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source?test&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td colspan="3"&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="4"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;test results for page in debug mode&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;should contain&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source?test&amp;amp;debug&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td colspan="3"&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="4"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;test results for suite&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;should contain&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source?suite&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td colspan="3"&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="4"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;its test results should contain&lt;/td&gt;
		&lt;td colspan="2"&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;test results for page&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td&gt;should contain&lt;/td&gt;
		&lt;td&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;test ressults for page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;should not contain&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source?test&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor7"&gt;
		&lt;td&gt;reject&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td colspan="3"&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="4"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and should contain&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="2"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and should match&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="2"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and should not contain&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor7"&gt;
		&lt;td&gt;reject&lt;/td&gt;
		&lt;td&gt;content contains&lt;/td&gt;
		&lt;td&gt;@text&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="2"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;widget&lt;/td&gt;
		&lt;td&gt;wikiText&lt;/td&gt;
		&lt;td&gt;should render&lt;/td&gt;
		&lt;td&gt;htmlText&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;create page&lt;/td&gt;
		&lt;td&gt;WidgetPage&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td colspan="2"&gt;@wikiText&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;WidgetPage&lt;/td&gt;
		&lt;td colspan="2"&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td colspan="3"&gt;@htmlText&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="4"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;the line&lt;/td&gt;
		&lt;td&gt;after&lt;/td&gt;
		&lt;td&gt;should come after&lt;/td&gt;
		&lt;td&gt;before&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;echo int&lt;/td&gt;
		&lt;td&gt;$@before&lt;/td&gt;
		&lt;td colspan="2"&gt;&amp;lt; $@after&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td colspan="3"&gt;pass&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td&gt;pass&lt;/td&gt;
		&lt;td&gt;pass&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;show collapsed&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="2"&gt;@content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;show Symbol&lt;/td&gt;
		&lt;td&gt;result&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;then&lt;/td&gt;
		&lt;td&gt;pass&lt;/td&gt;
		&lt;td&gt;assertions pass,&lt;/td&gt;
		&lt;td&gt;fail&lt;/td&gt;
		&lt;td&gt;fail,&lt;/td&gt;
		&lt;td&gt;ignore&lt;/td&gt;
		&lt;td&gt;are ignored&lt;/td&gt;
		&lt;td&gt;exception&lt;/td&gt;
		&lt;td&gt;exceptions thrown&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td colspan="8"&gt;Assertions:&amp;lt;[^&amp;lt;]*@pass right, @fail wrong, @ignore ignored, @exception exceptions&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td&gt;extract match;&lt;/td&gt;
		&lt;td&gt;Assertions:&amp;lt;[^&amp;lt;]*exceptions&lt;/td&gt;
		&lt;td&gt;contents&lt;/td&gt;
		&lt;td colspan="6"&gt;0&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and cell&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
		&lt;td&gt;has result&lt;/td&gt;
		&lt;td&gt;result&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td colspan="3"&gt;class="@result"&amp;gt;@text&amp;lt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td&gt;extract match;&lt;/td&gt;
		&lt;td&gt;class="[^"]+"&amp;gt;@text&amp;lt;&lt;/td&gt;
		&lt;td&gt;contents&lt;/td&gt;
		&lt;td&gt;0&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;span class="meta"&gt;variable defined: TestSTART=@@@START: Test specific content&lt;/span&gt;
 &lt;br/&gt;&lt;span class="meta"&gt;variable defined: TestEND=@@@END: Test specific content&lt;/span&gt;
 &lt;br/&gt;&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and TestSystem setup is&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;$CONTENT=&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td&gt;$CONTENT
@content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and setup content is&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;$CONTENT=&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td&gt;$CONTENT
@content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and test content is&lt;/td&gt;
		&lt;td colspan="2"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor2"&gt;
		&lt;td&gt;given page&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td&gt;$CONTENT @@@START: Test specific content@content@@@END: Test specific content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td&gt;make&lt;/td&gt;
		&lt;td&gt;$IT&lt;/td&gt;
		&lt;td colspan="2"&gt;a test page&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;get HTML result&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;start&lt;/td&gt;
		&lt;td&gt;Response Examiner.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;setType&lt;/td&gt;
		&lt;td&gt;contents&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;setPattern&lt;/td&gt;
		&lt;td&gt;@@@START: Test specific content[^&amp;lt;]*(.*&amp;gt;)\s*@@@END: Test specific content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor7"&gt;
		&lt;td&gt;setGroup&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;$HTML_Result=&lt;/td&gt;
		&lt;td&gt;found&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;get HTML input&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;start&lt;/td&gt;
		&lt;td&gt;Response Examiner.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;setType&lt;/td&gt;
		&lt;td&gt;pageHtml&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;setPattern&lt;/td&gt;
		&lt;td&gt;@@@START: Test specific content[^&amp;lt;]*(.*&amp;gt;)\s*@@@END: Test specific content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor7"&gt;
		&lt;td&gt;setGroup&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;$HTML_Input=&lt;/td&gt;
		&lt;td&gt;found&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor2"&gt;
		&lt;td&gt;show collapsed&lt;/td&gt;
		&lt;td&gt;get value&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;get collapsed executon log for page&lt;/td&gt;
		&lt;td colspan="2"&gt;source&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source?executionLog&lt;/td&gt;
		&lt;td&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="3"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;when page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;is tested&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;@source?test&lt;/td&gt;
		&lt;td&gt;200&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor2"&gt;
		&lt;td&gt;show collapsed&lt;/td&gt;
		&lt;td colspan="3"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;when page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;is tested and HTML is extracted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;when page&lt;/td&gt;
		&lt;td&gt;@source&lt;/td&gt;
		&lt;td colspan="2"&gt;is tested&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td colspan="4"&gt;get HTML result&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td colspan="4"&gt;get HTML input&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="collapsible closed"&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='#' class='expandall'&gt;Expand&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='#' class='collapseall'&gt;Collapse&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
	&lt;p class="title"&gt;Included page: &lt;a href="FitNesse.SuiteAcceptanceTests.SuiteSlimTests.SetUp"&gt;.FitNesse.SuiteAcceptanceTests.SuiteSlimTests.SetUp&lt;/a&gt; &lt;a href="FitNesse.SuiteAcceptanceTests.SuiteSlimTests.SetUp?edit&amp;amp;redirectToReferer=true&amp;amp;redirectAction=" class="edit"&gt;(edit)&lt;/a&gt;&lt;/p&gt;
	&lt;div&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;Import&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;&lt;span class="pass"&gt;fitnesse.fixtures&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;SetUp &lt;span class="error"&gt;java.lang.NoClassDefFoundError: org/apache/commons/lang3/StringUtils&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;Plugins=fitnesse.testsystems.slim.CustomTableAliasPlugin
Plugins=fitnesse.testsystems.slim.CustomScriptTableRenderingPlugin
CustomComparators=glob:fitnesse.testsystems.slim.GlobComparator&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;Library&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;page driver &lt;span class="error"&gt;Could not invoke constructor for PageDriver[0]&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor1"&gt;
		&lt;td&gt;&lt;span class="pass"&gt;echo fixture&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;See also: &lt;a href="FitNesse.SuiteAcceptanceTests.SuiteSlimTests.IgnoredTestsShouldColorGray.TestPage"&gt;&amp;gt;TestPage&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;&lt;span class="meta"&gt;variable defined: TestPageName=Testpage&lt;/span&gt;
&lt;br/&gt;&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td colspan="9"&gt;script&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;given test page&lt;/td&gt;
		&lt;td colspan="8" class="error"&gt;Testpage&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;given test page&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;given page&lt;/td&gt;
		&lt;td colspan="2" class="error"&gt;Testpage&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="3"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;given page&lt;/td&gt;
		&lt;td colspan="2"&gt;page&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;given page&lt;/td&gt;
		&lt;td class="error"&gt;Testpage&lt;/td&gt;
		&lt;td class="error"&gt;with content&lt;/td&gt;
		&lt;td class="error"&gt;nothing&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="4"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;given page&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;create page &lt;span class="error"&gt;No Method createPageWithContent[2] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
getDisgracedMethodName() -&amp;gt; class java.lang.String
getMethodName() -&amp;gt; class java.lang.String
getParameters() -&amp;gt; class java.lang.String
hashCode() -&amp;gt; int
mergeParameters(java.lang.Object[]) -&amp;gt; class [Ljava.lang.Object;
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;Testpage&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td colspan="2"&gt;nothing&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td&gt;$IT&amp;lt;-[Testpage]&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td colspan="3"&gt;Testpage&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;$CONTENT&amp;lt;-[]&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td colspan="2"&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td&gt;make &lt;span class="error"&gt;No Method makeATestPage[1] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
getDisgracedMethodName() -&amp;gt; class java.lang.String
getMethodName() -&amp;gt; class java.lang.String
getParameters() -&amp;gt; class java.lang.String
hashCode() -&amp;gt; int
mergeParameters(java.lang.Object[]) -&amp;gt; class [Ljava.lang.Object;
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;Testpage&lt;/td&gt;
		&lt;td&gt;a test page&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="ignore"&gt;and Test System setup is&lt;/td&gt;
		&lt;td colspan="8" class="ignore"&gt;!define TEST_SYSTEM {slim}
!path lib/*.jar
&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and TestSystem setup is&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;$CONTENT&amp;lt;-[
!define TEST_SYSTEM {slim}
!path lib/*.jar
]&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td&gt;$CONTENT-&gt;[]
!define TEST_SYSTEM {slim}
!path lib/*.jar
&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="ignore"&gt;and Setup content is&lt;/td&gt;
		&lt;td colspan="8" class="ignore"&gt;
!|import|
|fitnesse.slim.test|

!|Scenario|Stop Test|
|start|ConstructorThrows|stop test|

!|Scenario|Not Executed|MESSAGE |
|check|echo|@MESSAGE|cannot fail @MESSAGE|

&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and setup content is&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;$CONTENT&amp;lt;-[
!define TEST_SYSTEM {slim}
!path lib/*.jar


!|import|
|fitnesse.slim.test|

!|Scenario|Stop Test|
|start|ConstructorThrows|stop test|

!|Scenario|Not Executed|MESSAGE |
|check|echo|@MESSAGE|cannot fail @MESSAGE|

]&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td&gt;$CONTENT-&gt;[
!define TEST_SYSTEM {slim}
!path lib/*.jar
]

!|import|
|fitnesse.slim.test|

!|Scenario|Stop Test|
|start|ConstructorThrows|stop test|

!|Scenario|Not Executed|MESSAGE |
|check|echo|@MESSAGE|cannot fail @MESSAGE|

&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;and Test content is&lt;/td&gt;
		&lt;td colspan="8" class="error"&gt;
!|Script|
|Stop Test|
|Not Executed and should be ignored|
!|Script|
|Not Executed and should be ignored as well|
&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and test content is&lt;/td&gt;
		&lt;td colspan="2"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;given page&lt;/td&gt;
		&lt;td class="error"&gt;$IT-&gt;[Testpage]&lt;/td&gt;
		&lt;td class="error"&gt;with content&lt;/td&gt;
		&lt;td class="error"&gt;$CONTENT-&gt;[
!define TEST_SYSTEM {slim}
!path lib/*.jar


!|import|
|fitnesse.slim.test|

!|Scenario|Stop Test|
|start|ConstructorThrows|stop test|

!|Scenario|Not Executed|MESSAGE |
|check|echo|@MESSAGE|cannot fail @MESSAGE|

] @@@START: Test specific content
!|Script|
|Stop Test|
|Not Executed and should be ignored|
!|Script|
|Not Executed and should be ignored as well|
@@@END: Test specific content&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="4"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;given page&lt;/td&gt;
		&lt;td&gt;page&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor3"&gt;
		&lt;td&gt;create page &lt;span class="error"&gt;No Method createPageWithContent[2] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
getDisgracedMethodName() -&amp;gt; class java.lang.String
getMethodName() -&amp;gt; class java.lang.String
getParameters() -&amp;gt; class java.lang.String
hashCode() -&amp;gt; int
mergeParameters(java.lang.Object[]) -&amp;gt; class [Ljava.lang.Object;
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;$IT-&gt;[Testpage]&lt;/td&gt;
		&lt;td&gt;with content&lt;/td&gt;
		&lt;td colspan="2"&gt;$CONTENT-&gt;[
!define TEST_SYSTEM {slim}
!path lib/*.jar


!|import|
|fitnesse.slim.test|

!|Scenario|Stop Test|
|start|ConstructorThrows|stop test|

!|Scenario|Not Executed|MESSAGE |
|check|echo|@MESSAGE|cannot fail @MESSAGE|

] @@@START: Test specific content
!|Script|
|Stop Test|
|Not Executed and should be ignored|
!|Script|
|Not Executed and should be ignored as well|
@@@END: Test specific content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td&gt;$IT&amp;lt;-[Testpage]&lt;/td&gt;
		&lt;td&gt;echo&lt;/td&gt;
		&lt;td colspan="3"&gt;$IT-&gt;[Testpage]&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="slimRowColor4"&gt;
		&lt;td&gt;make &lt;span class="error"&gt;No Method makeATestPage[1] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
getDisgracedMethodName() -&amp;gt; class java.lang.String
getMethodName() -&amp;gt; class java.lang.String
getParameters() -&amp;gt; class java.lang.String
hashCode() -&amp;gt; int
mergeParameters(java.lang.Object[]) -&amp;gt; class [Ljava.lang.Object;
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;$IT-&gt;[Testpage]&lt;/td&gt;
		&lt;td colspan="2"&gt;a test page&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;when page&lt;/td&gt;
		&lt;td class="error"&gt;Testpage&lt;/td&gt;
		&lt;td colspan="7" class="error"&gt;is tested and HTML is extracted&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;when page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;is tested and HTML is extracted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;when page&lt;/td&gt;
		&lt;td class="error"&gt;Testpage&lt;/td&gt;
		&lt;td colspan="2" class="error"&gt;is tested&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="4"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;when page&lt;/td&gt;
		&lt;td&gt;source&lt;/td&gt;
		&lt;td&gt;is tested&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;Testpage?test&lt;/td&gt;
		&lt;td&gt;200 &lt;span class="error"&gt;No Method requestPage[1] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
getDisgracedMethodName() -&amp;gt; class java.lang.String
getMethodName() -&amp;gt; class java.lang.String
getParameters() -&amp;gt; class java.lang.String
hashCode() -&amp;gt; int
mergeParameters(java.lang.Object[]) -&amp;gt; class [Ljava.lang.Object;
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;show collapsed&lt;/td&gt;
		&lt;td colspan="3" class="error"&gt;content&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="4"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;show collapsed&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show &lt;span class="error"&gt;No Method content[0] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
getDisgracedMethodName() -&amp;gt; class java.lang.String
getMethodName() -&amp;gt; class java.lang.String
getParameters() -&amp;gt; class java.lang.String
hashCode() -&amp;gt; int
mergeParameters(java.lang.Object[]) -&amp;gt; class [Ljava.lang.Object;
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td colspan="2"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td colspan="4" class="error"&gt;get HTML result&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="4"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;get HTML result&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;start&lt;/td&gt;
		&lt;td&gt;&lt;span class="pass"&gt;Response Examiner.&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;setType&lt;/td&gt;
		&lt;td&gt;contents&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;setPattern&lt;/td&gt;
		&lt;td&gt;@@@START: Test specific content[^&lt;]*(.*&gt;)\s*@@@END: Test specific content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor7"&gt;
		&lt;td&gt;setGroup&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;&lt;table&gt;&lt;tr class="exception closed"&gt;&lt;td&gt; &lt;span class="error"&gt;$HTML_Result=&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="exception-detail closed-detail"&gt;&lt;td&gt;__EXCEPTION__:java.lang.NullPointerException
	at fitnesse.fixtures.ResponseExaminer.extractValueFromResponse(ResponseExaminer.java:83) [fitnesse-20211030.jar:20211030]
	at fitnesse.fixtures.ResponseExaminer.found(ResponseExaminer.java:147) [fitnesse-20211030.jar:20211030]
	at fitnesse.fixtures.ResponseExaminer.found(ResponseExaminer.java:142) [fitnesse-20211030.jar:20211030]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [n/a]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) [n/a]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [n/a]
	at java.base/java.lang.reflect.Method.invoke(Method.java:566) [rt.jar]
	at fitnesse.slim.fixtureInteraction.SimpleInteraction.methodInvoke(SimpleInteraction.java:322) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.fixtureInteraction.SimpleInteraction.callMethod(SimpleInteraction.java:307) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.fixtureInteraction.SimpleInteraction.invokeMethod(SimpleInteraction.java:290) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.fixtureInteraction.SimpleInteraction.findAndInvoke(SimpleInteraction.java:217) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.MethodExecutor.findAndInvoke(MethodExecutor.java:18) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.FixtureMethodExecutor.execute(FixtureMethodExecutor.java:18) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.StatementExecutor.getMethodExecutionResult(StatementExecutor.java:139) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.StatementExecutor.callAndAssign(StatementExecutor.java:122) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.instructions.CallAndOptionalAssignInstruction.executeInternal(CallAndOptionalAssignInstruction.java:28) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.instructions.Instruction.execute(Instruction.java:29) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.ListExecutor$Executive.executeStatement(ListExecutor.java:49) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.ListExecutor$Executive.executeStatements(ListExecutor.java:43) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.ListExecutor.execute(ListExecutor.java:85) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimServer.executeInstructions(SlimServer.java:82) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimServer.processOneSetOfInstructions(SlimServer.java:75) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimServer.tryProcessInstructions(SlimServer.java:62) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimServer.serve(SlimServer.java:47) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.handle(SlimService.java:169) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.acceptOne(SlimService.java:177) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.accept(SlimService.java:139) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.startWithFactory(SlimService.java:92) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.main(SlimService.java:57) [fitnesse-20211030.jar:20211030]&lt;/td&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
		&lt;td&gt;found&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td colspan="4" class="error"&gt;get HTML input&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="4"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;get HTML input&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;start&lt;/td&gt;
		&lt;td&gt;&lt;span class="pass"&gt;Response Examiner.&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;setType&lt;/td&gt;
		&lt;td&gt;pageHtml&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor6"&gt;
		&lt;td&gt;setPattern&lt;/td&gt;
		&lt;td&gt;@@@START: Test specific content[^&lt;]*(.*&gt;)\s*@@@END: Test specific content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor7"&gt;
		&lt;td&gt;setGroup&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;&lt;table&gt;&lt;tr class="exception closed"&gt;&lt;td&gt; &lt;span class="error"&gt;$HTML_Input=&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="exception-detail closed-detail"&gt;&lt;td&gt;__EXCEPTION__:java.lang.NullPointerException
	at fitnesse.fixtures.ResponseExaminer.extractValueFromResponse(ResponseExaminer.java:93) [fitnesse-20211030.jar:20211030]
	at fitnesse.fixtures.ResponseExaminer.found(ResponseExaminer.java:147) [fitnesse-20211030.jar:20211030]
	at fitnesse.fixtures.ResponseExaminer.found(ResponseExaminer.java:142) [fitnesse-20211030.jar:20211030]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [n/a]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) [n/a]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [n/a]
	at java.base/java.lang.reflect.Method.invoke(Method.java:566) [rt.jar]
	at fitnesse.slim.fixtureInteraction.SimpleInteraction.methodInvoke(SimpleInteraction.java:322) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.fixtureInteraction.SimpleInteraction.callMethod(SimpleInteraction.java:307) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.fixtureInteraction.SimpleInteraction.invokeMethod(SimpleInteraction.java:290) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.fixtureInteraction.SimpleInteraction.findAndInvoke(SimpleInteraction.java:217) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.MethodExecutor.findAndInvoke(MethodExecutor.java:18) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.FixtureMethodExecutor.execute(FixtureMethodExecutor.java:18) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.StatementExecutor.getMethodExecutionResult(StatementExecutor.java:139) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.StatementExecutor.callAndAssign(StatementExecutor.java:122) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.instructions.CallAndOptionalAssignInstruction.executeInternal(CallAndOptionalAssignInstruction.java:28) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.instructions.Instruction.execute(Instruction.java:29) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.ListExecutor$Executive.executeStatement(ListExecutor.java:49) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.ListExecutor$Executive.executeStatements(ListExecutor.java:43) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.ListExecutor.execute(ListExecutor.java:85) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimServer.executeInstructions(SlimServer.java:82) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimServer.processOneSetOfInstructions(SlimServer.java:75) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimServer.tryProcessInstructions(SlimServer.java:62) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimServer.serve(SlimServer.java:47) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.handle(SlimService.java:169) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.acceptOne(SlimService.java:177) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.accept(SlimService.java:139) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.startWithFactory(SlimService.java:92) [fitnesse-20211030.jar:20211030]
	at fitnesse.slim.SlimService.main(SlimService.java:57) [fitnesse-20211030.jar:20211030]&lt;/td&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
		&lt;td&gt;found&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="ignore"&gt;show collapsed&lt;/td&gt;
		&lt;td class="ignore"&gt;get value&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="2"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;show collapsed&lt;/td&gt;
		&lt;td&gt;content&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show&lt;/td&gt;
		&lt;td colspan="2"&gt;get value&lt;/td&gt;
	&lt;td&gt;null&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;then&lt;/td&gt;
		&lt;td class="error"&gt;\d&lt;/td&gt;
		&lt;td class="error"&gt;assertions pass,&lt;/td&gt;
		&lt;td class="error"&gt;0&lt;/td&gt;
		&lt;td class="error"&gt;fail,&lt;/td&gt;
		&lt;td class="error"&gt;0&lt;/td&gt;
		&lt;td class="error"&gt;are ignored&lt;/td&gt;
		&lt;td class="error"&gt;1&lt;/td&gt;
		&lt;td class="error"&gt;exceptions thrown&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;then&lt;/td&gt;
		&lt;td&gt;pass&lt;/td&gt;
		&lt;td&gt;assertions pass,&lt;/td&gt;
		&lt;td&gt;fail&lt;/td&gt;
		&lt;td&gt;fail,&lt;/td&gt;
		&lt;td&gt;ignore&lt;/td&gt;
		&lt;td&gt;are ignored&lt;/td&gt;
		&lt;td&gt;exception&lt;/td&gt;
		&lt;td&gt;exceptions thrown&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure &lt;span class="error"&gt;No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td colspan="8"&gt;Assertions:&lt;[^&lt;]*\d right, 0 wrong, 0 ignored, 1 exceptions&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show &lt;span class="error"&gt;No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;extract match;&lt;/td&gt;
		&lt;td&gt;Assertions:&lt;[^&lt;]*exceptions&lt;/td&gt;
		&lt;td&gt;contents&lt;/td&gt;
		&lt;td colspan="6"&gt;0&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;and cell&lt;/td&gt;
		&lt;td class="error"&gt;Stop Test&lt;/td&gt;
		&lt;td class="error"&gt;has result&lt;/td&gt;
		&lt;td colspan="6" class="error"&gt;error&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and cell&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
		&lt;td&gt;has result&lt;/td&gt;
		&lt;td&gt;result&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure &lt;span class="error"&gt;No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td colspan="3"&gt;class="error"&gt;Stop Test&lt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show &lt;span class="error"&gt;No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;extract match;&lt;/td&gt;
		&lt;td&gt;class="[^"]+"&gt;Stop Test&lt;&lt;/td&gt;
		&lt;td&gt;contents&lt;/td&gt;
		&lt;td&gt;0&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;and cell&lt;/td&gt;
		&lt;td class="error"&gt;Not Executed and should be ignored&lt;/td&gt;
		&lt;td class="error"&gt;has result&lt;/td&gt;
		&lt;td colspan="6" class="error"&gt;ignore&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and cell&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
		&lt;td&gt;has result&lt;/td&gt;
		&lt;td&gt;result&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure &lt;span class="error"&gt;No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td colspan="3"&gt;class="ignore"&gt;Not Executed and should be ignored&lt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show &lt;span class="error"&gt;No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;extract match;&lt;/td&gt;
		&lt;td&gt;class="[^"]+"&gt;Not Executed and should be ignored&lt;&lt;/td&gt;
		&lt;td&gt;contents&lt;/td&gt;
		&lt;td&gt;0&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;and cell&lt;/td&gt;
		&lt;td class="error"&gt;Not Executed and should be ignored as well&lt;/td&gt;
		&lt;td class="error"&gt;has result&lt;/td&gt;
		&lt;td colspan="6" class="error"&gt;ignore&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and cell&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
		&lt;td&gt;has result&lt;/td&gt;
		&lt;td&gt;result&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure &lt;span class="error"&gt;No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td colspan="3"&gt;class="ignore"&gt;Not Executed and should be ignored as well&lt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show &lt;span class="error"&gt;No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;extract match;&lt;/td&gt;
		&lt;td&gt;class="[^"]+"&gt;Not Executed and should be ignored as well&lt;&lt;/td&gt;
		&lt;td&gt;contents&lt;/td&gt;
		&lt;td&gt;0&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;and cell&lt;/td&gt;
		&lt;td class="error"&gt;Test not run&lt;/td&gt;
		&lt;td class="error"&gt;has result&lt;/td&gt;
		&lt;td colspan="6" class="error"&gt;ignore&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;and cell&lt;/td&gt;
		&lt;td&gt;text&lt;/td&gt;
		&lt;td&gt;has result&lt;/td&gt;
		&lt;td&gt;result&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor8"&gt;
		&lt;td&gt;ensure &lt;span class="error"&gt;No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;content matches&lt;/td&gt;
		&lt;td colspan="3"&gt;class="ignore"&gt;Test not run&lt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show &lt;span class="error"&gt;No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;extract match;&lt;/td&gt;
		&lt;td&gt;class="[^"]+"&gt;Test not run&lt;&lt;/td&gt;
		&lt;td&gt;contents&lt;/td&gt;
		&lt;td&gt;0&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="ignore"&gt;show Symbol&lt;/td&gt;
		&lt;td colspan="8" class="ignore"&gt;$HTML_Input&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;show Symbol&lt;/td&gt;
		&lt;td&gt;result&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="ignore"&gt;show Symbol&lt;/td&gt;
		&lt;td colspan="8" class="ignore"&gt;$HTML_Result&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;show Symbol&lt;/td&gt;
		&lt;td&gt;result&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;tr class="scenario closed"&gt;
		&lt;td class="error"&gt;get collapsed executon log for page&lt;/td&gt;
		&lt;td colspan="8" class="error"&gt;Testpage&lt;/td&gt;
	&lt;/tr&gt;&lt;tr class="scenario-detail closed-detail"&gt;&lt;td colspan="9"&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;scenario&lt;/td&gt;
		&lt;td&gt;get collapsed executon log for page&lt;/td&gt;
		&lt;td colspan="2"&gt;source&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;check&lt;/td&gt;
		&lt;td&gt;request page&lt;/td&gt;
		&lt;td&gt;Testpage?executionLog&lt;/td&gt;
		&lt;td&gt;200 &lt;span class="error"&gt;No Method requestPage[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor9"&gt;
		&lt;td&gt;show &lt;span class="error"&gt;No Method content[0] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&amp;gt; void
callParseMethod(java.lang.Class, java.lang.String) -&amp;gt; class java.lang.Object
camel(java.lang.String) -&amp;gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&amp;gt; void
contents() -&amp;gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&amp;gt; class java.lang.String
counts() -&amp;gt; class java.lang.String
doCell(fit.Parse, int) -&amp;gt; void
doCells(fit.Parse) -&amp;gt; void
doRow(fit.Parse) -&amp;gt; void
doRows(fit.Parse) -&amp;gt; void
doTable(fit.Parse) -&amp;gt; void
doTables(fit.Parse) -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
escape(java.lang.String) -&amp;gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&amp;gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&amp;gt; void
execute() -&amp;gt; void
extractValueFromResponse() -&amp;gt; void
found() -&amp;gt; class java.lang.String
found(int) -&amp;gt; class java.lang.String
fullContents() -&amp;gt; class java.lang.String
getArgs() -&amp;gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&amp;gt; void
getClass() -&amp;gt; class java.lang.Class
getSymbol(java.lang.String) -&amp;gt; class java.lang.Object
getValue() -&amp;gt; class java.lang.String
gray(java.lang.String) -&amp;gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&amp;gt; void
hasParseMethod(java.lang.Class) -&amp;gt; boolean
hasSymbol(java.lang.String) -&amp;gt; boolean
hashCode() -&amp;gt; int
html() -&amp;gt; class java.lang.String
ignore(fit.Parse) -&amp;gt; void
inOrder() -&amp;gt; boolean
isFriendlyException(java.lang.Throwable) -&amp;gt; boolean
label(java.lang.String) -&amp;gt; class java.lang.String
loadFixture(java.lang.String) -&amp;gt; class fit.Fixture
matchCount() -&amp;gt; int
matcher() -&amp;gt; class java.util.regex.Matcher
matches() -&amp;gt; boolean
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
occursAfter() -&amp;gt; boolean
parse(java.lang.String, java.lang.Class) -&amp;gt; class java.lang.Object
reset() -&amp;gt; void
right(fit.Parse) -&amp;gt; void
setForcedAbort(boolean) -&amp;gt; void
setGroup(int) -&amp;gt; void
setLine(java.lang.String) -&amp;gt; void
setNumber(int) -&amp;gt; void
setPattern(java.lang.String) -&amp;gt; void
setSymbol(java.lang.String, java.lang.Object) -&amp;gt; void
setType(java.lang.String) -&amp;gt; void
setValue(java.lang.String) -&amp;gt; void
source() -&amp;gt; class java.lang.String
string() -&amp;gt; class java.lang.String
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
wrappedHtml() -&amp;gt; class java.lang.String
wrong(fit.Parse) -&amp;gt; void
wrong(fit.Parse, java.lang.String) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td colspan="3"&gt;content&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;div class="collapsible closed teardown"&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='#' class='expandall'&gt;Expand&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='#' class='collapseall'&gt;Collapse&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
	&lt;p class="title"&gt;Included page: &lt;a href="FitNesse.SuiteAcceptanceTests.TearDown"&gt;.FitNesse.SuiteAcceptanceTests.TearDown&lt;/a&gt; &lt;a href="FitNesse.SuiteAcceptanceTests.TearDown?edit&amp;amp;redirectToReferer=true&amp;amp;redirectAction=" class="edit"&gt;(edit)&lt;/a&gt;&lt;/p&gt;
	&lt;div&gt;&lt;hr/&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;tear down &lt;span class="error"&gt;java.lang.NullPointerException&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
    <relativePageName>IgnoredTestsShouldColorGray</relativePageName>
    <instructions>
      <instructionResult>
        <instruction>{id='import_39_0', instruction='import', path='fitnesse.fixtures'}</instruction>
        <slimResult>pass(fitnesse.fixtures)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>import_39_0</instructionId>
          <col>0</col>
          <row>1</row>
          <type>ImportExpectation</type>
          <evaluationMessage>fitnesse.fixtures</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_40_0', instruction='make', instanceName='decisionTable_40', className='SetUp', args=[Plugins=fitnesse.testsystems.slim.CustomTableAliasPlugin
Plugins=fitnesse.testsystems.slim.CustomScriptTableRenderingPlugin
CustomComparators=glob:fitnesse.testsystems.slim.GlobComparator]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_40_0</instructionId>
          <type>ConstructionExpectation</type>
          <evaluationMessage>java.lang.NoClassDefFoundError: org/apache/commons/lang3/StringUtils</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='library_41_0', instruction='make', instanceName='library1', className='PageDriver', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>library_41_0</instructionId>
          <type>ConstructionExpectation</type>
          <evaluationMessage>Could not invoke constructor for PageDriver[0]</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='library_41_1', instruction='make', instanceName='library2', className='EchoFixture', args=[]}</instruction>
        <slimResult>pass(echo fixture)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>library_41_1</instructionId>
          <col>0</col>
          <row>2</row>
          <type>ConstructionExpectation</type>
          <evaluationMessage>echo fixture</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_0/scriptTable_2_0/scriptTable_1_0/scriptTable_0_0', instruction='call', instanceName='scriptTableActor', methodName='createPageWithContent', args=[Testpage, nothing]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_0/scriptTable_2_0/scriptTable_1_0/scriptTable_0_0</instructionId>
          <type>ScriptActionExpectation</type>
          <evaluationMessage>No Method createPageWithContent[2] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
getDisgracedMethodName() -&gt; class java.lang.String
getMethodName() -&gt; class java.lang.String
getParameters() -&gt; class java.lang.String
hashCode() -&gt; int
mergeParameters(java.lang.Object[]) -&gt; class [Ljava.lang.Object;
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_0/scriptTable_2_0/scriptTable_1_0/scriptTable_0_1', instruction='callAndAssign', symbolName='IT', instanceName='scriptTableActor', methodName='echo', args=[Testpage]}</instruction>
        <slimResult>$IT&lt;-[Testpage]</slimResult>
        <expectation>
          <instructionId>scriptTable_42_0/scriptTable_2_0/scriptTable_1_0/scriptTable_0_1</instructionId>
          <col>0</col>
          <row>2</row>
          <type>SymbolAssignmentExpectation</type>
          <evaluationMessage>$IT&lt;-[Testpage]</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_0/scriptTable_2_0/scriptTable_1_1', instruction='callAndAssign', symbolName='CONTENT', instanceName='scriptTableActor', methodName='echo', args=[]}</instruction>
        <slimResult>$CONTENT&lt;-[]</slimResult>
        <expectation>
          <instructionId>scriptTable_42_0/scriptTable_2_0/scriptTable_1_1</instructionId>
          <col>0</col>
          <row>2</row>
          <type>SymbolAssignmentExpectation</type>
          <evaluationMessage>$CONTENT&lt;-[]</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_0/scriptTable_2_1', instruction='call', instanceName='scriptTableActor', methodName='makeATestPage', args=[Testpage]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_0/scriptTable_2_1</instructionId>
          <type>ScriptActionExpectation</type>
          <evaluationMessage>No Method makeATestPage[1] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
getDisgracedMethodName() -&gt; class java.lang.String
getMethodName() -&gt; class java.lang.String
getParameters() -&gt; class java.lang.String
hashCode() -&gt; int
mergeParameters(java.lang.Object[]) -&gt; class [Ljava.lang.Object;
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_1/scriptTable_31_0', instruction='callAndAssign', symbolName='CONTENT', instanceName='scriptTableActor', methodName='echo', args=[$CONTENT
!define TEST_SYSTEM {slim}
!path lib/*.jar
]}</instruction>
        <slimResult>$CONTENT&lt;-[
!define TEST_SYSTEM {slim}
!path lib/*.jar
]</slimResult>
        <expectation>
          <instructionId>scriptTable_42_1/scriptTable_31_0</instructionId>
          <col>0</col>
          <row>1</row>
          <type>SymbolAssignmentExpectation</type>
          <evaluationMessage>$CONTENT&lt;-[
!define TEST_SYSTEM {slim}
!path lib/*.jar
]</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_2/scriptTable_32_0', instruction='callAndAssign', symbolName='CONTENT', instanceName='scriptTableActor', methodName='echo', args=[$CONTENT

!|import|
|fitnesse.slim.test|

!|Scenario|Stop Test|
|start|ConstructorThrows|stop test|

!|Scenario|Not Executed|MESSAGE |
|check|echo|@MESSAGE|cannot fail @MESSAGE|

]}</instruction>
        <slimResult>$CONTENT&lt;-[
!define TEST_SYSTEM {slim}
!path lib/*.jar


!|import|
|fitnesse.slim.test|

!|Scenario|Stop Test|
|start|ConstructorThrows|stop test|

!|Scenario|Not Executed|MESSAGE |
|check|echo|@MESSAGE|cannot fail @MESSAGE|

]</slimResult>
        <expectation>
          <instructionId>scriptTable_42_2/scriptTable_32_0</instructionId>
          <col>0</col>
          <row>1</row>
          <type>SymbolAssignmentExpectation</type>
          <evaluationMessage>$CONTENT&lt;-[
!define TEST_SYSTEM {slim}
!path lib/*.jar


!|import|
|fitnesse.slim.test|

!|Scenario|Stop Test|
|start|ConstructorThrows|stop test|

!|Scenario|Not Executed|MESSAGE |
|check|echo|@MESSAGE|cannot fail @MESSAGE|

]</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_3/scriptTable_33_0/scriptTable_0_0', instruction='call', instanceName='scriptTableActor', methodName='createPageWithContent', args=[$IT, $CONTENT @@@START: Test specific content
!|Script|
|Stop Test|
|Not Executed and should be ignored|
!|Script|
|Not Executed and should be ignored as well|
@@@END: Test specific content]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_3/scriptTable_33_0/scriptTable_0_0</instructionId>
          <type>ScriptActionExpectation</type>
          <evaluationMessage>No Method createPageWithContent[2] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
getDisgracedMethodName() -&gt; class java.lang.String
getMethodName() -&gt; class java.lang.String
getParameters() -&gt; class java.lang.String
hashCode() -&gt; int
mergeParameters(java.lang.Object[]) -&gt; class [Ljava.lang.Object;
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_3/scriptTable_33_0/scriptTable_0_1', instruction='callAndAssign', symbolName='IT', instanceName='scriptTableActor', methodName='echo', args=[$IT]}</instruction>
        <slimResult>$IT&lt;-[Testpage]</slimResult>
        <expectation>
          <instructionId>scriptTable_42_3/scriptTable_33_0/scriptTable_0_1</instructionId>
          <col>0</col>
          <row>2</row>
          <type>SymbolAssignmentExpectation</type>
          <evaluationMessage>$IT&lt;-[Testpage]</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_3/scriptTable_33_1', instruction='call', instanceName='scriptTableActor', methodName='makeATestPage', args=[$IT]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_3/scriptTable_33_1</instructionId>
          <type>ScriptActionExpectation</type>
          <evaluationMessage>No Method makeATestPage[1] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
getDisgracedMethodName() -&gt; class java.lang.String
getMethodName() -&gt; class java.lang.String
getParameters() -&gt; class java.lang.String
hashCode() -&gt; int
mergeParameters(java.lang.Object[]) -&gt; class [Ljava.lang.Object;
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_0/scriptTable_37_0', instruction='call', instanceName='scriptTableActor', methodName='requestPage', args=[Testpage?test]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_4/scriptTable_38_0/scriptTable_37_0</instructionId>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>No Method requestPage[1] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
getDisgracedMethodName() -&gt; class java.lang.String
getMethodName() -&gt; class java.lang.String
getParameters() -&gt; class java.lang.String
hashCode() -&gt; int
mergeParameters(java.lang.Object[]) -&gt; class [Ljava.lang.Object;
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_0/scriptTable_37_1/scriptTable_27_0', instruction='call', instanceName='scriptTableActor', methodName='content', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_4/scriptTable_38_0/scriptTable_37_1/scriptTable_27_0</instructionId>
          <type>ShowActionExpectation</type>
          <evaluationMessage>No Method content[0] in class fitnesse.testsystems.slim.tables.MethodExtractorResult.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
getDisgracedMethodName() -&gt; class java.lang.String
getMethodName() -&gt; class java.lang.String
getParameters() -&gt; class java.lang.String
hashCode() -&gt; int
mergeParameters(java.lang.Object[]) -&gt; class [Ljava.lang.Object;
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_1/scriptTable_34_0', instruction='make', instanceName='scriptTableActor', className='ResponseExaminer', args=[]}</instruction>
        <slimResult>pass(Response Examiner.)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>scriptTable_42_4/scriptTable_38_1/scriptTable_34_0</instructionId>
          <col>1</col>
          <row>1</row>
          <type>ConstructionExpectation</type>
          <evaluationMessage>Response Examiner.</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_1/scriptTable_34_1', instruction='call', instanceName='scriptTableActor', methodName='setType', args=[contents]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>scriptTable_42_4/scriptTable_38_1/scriptTable_34_1</instructionId>
          <col>0</col>
          <row>2</row>
          <type>ScriptActionExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_1/scriptTable_34_2', instruction='call', instanceName='scriptTableActor', methodName='setPattern', args=[@@@START: Test specific content[^&lt;]*(.*&gt;)\s*@@@END: Test specific content]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>scriptTable_42_4/scriptTable_38_1/scriptTable_34_2</instructionId>
          <col>0</col>
          <row>3</row>
          <type>ScriptActionExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_1/scriptTable_34_3', instruction='call', instanceName='scriptTableActor', methodName='setGroup', args=[1]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>scriptTable_42_4/scriptTable_38_1/scriptTable_34_3</instructionId>
          <col>0</col>
          <row>4</row>
          <type>ScriptActionExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_1/scriptTable_34_4', instruction='callAndAssign', symbolName='HTML_Result', instanceName='scriptTableActor', methodName='found', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_4/scriptTable_38_1/scriptTable_34_4</instructionId>
          <type>SymbolAssignmentExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_2/scriptTable_35_0', instruction='make', instanceName='scriptTableActor', className='ResponseExaminer', args=[]}</instruction>
        <slimResult>pass(Response Examiner.)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>scriptTable_42_4/scriptTable_38_2/scriptTable_35_0</instructionId>
          <col>1</col>
          <row>1</row>
          <type>ConstructionExpectation</type>
          <evaluationMessage>Response Examiner.</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_2/scriptTable_35_1', instruction='call', instanceName='scriptTableActor', methodName='setType', args=[pageHtml]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>scriptTable_42_4/scriptTable_38_2/scriptTable_35_1</instructionId>
          <col>0</col>
          <row>2</row>
          <type>ScriptActionExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_2/scriptTable_35_2', instruction='call', instanceName='scriptTableActor', methodName='setPattern', args=[@@@START: Test specific content[^&lt;]*(.*&gt;)\s*@@@END: Test specific content]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>scriptTable_42_4/scriptTable_38_2/scriptTable_35_2</instructionId>
          <col>0</col>
          <row>3</row>
          <type>ScriptActionExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_2/scriptTable_35_3', instruction='call', instanceName='scriptTableActor', methodName='setGroup', args=[1]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>scriptTable_42_4/scriptTable_38_2/scriptTable_35_3</instructionId>
          <col>0</col>
          <row>4</row>
          <type>ScriptActionExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_2/scriptTable_35_4', instruction='callAndAssign', symbolName='HTML_Input', instanceName='scriptTableActor', methodName='found', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_4/scriptTable_38_2/scriptTable_35_4</instructionId>
          <type>SymbolAssignmentExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_4/scriptTable_38_2/scriptTable_35_5/scriptTable_27_0', instruction='call', instanceName='scriptTableActor', methodName='getValue', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>scriptTable_42_4/scriptTable_38_2/scriptTable_35_5/scriptTable_27_0</instructionId>
          <col>0</col>
          <row>1</row>
          <type>ShowActionExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_5/scriptTable_29_0', instruction='call', instanceName='scriptTableActor', methodName='contentMatches', args=[Assertions:&lt;[^&lt;]*\d right, 0 wrong, 0 ignored, 1 exceptions]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_5/scriptTable_29_0</instructionId>
          <type>EnsureActionExpectation</type>
          <evaluationMessage>No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_5/scriptTable_29_1', instruction='call', instanceName='scriptTableActor', methodName='extractMatch', args=[Assertions:&lt;[^&lt;]*exceptions, contents, 0]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_5/scriptTable_29_1</instructionId>
          <type>ShowActionExpectation</type>
          <evaluationMessage>No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_6/scriptTable_30_0', instruction='call', instanceName='scriptTableActor', methodName='contentMatches', args=[class="error"&gt;Stop Test&lt;]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_6/scriptTable_30_0</instructionId>
          <type>EnsureActionExpectation</type>
          <evaluationMessage>No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_6/scriptTable_30_1', instruction='call', instanceName='scriptTableActor', methodName='extractMatch', args=[class="[^"]+"&gt;Stop Test&lt;, contents, 0]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_6/scriptTable_30_1</instructionId>
          <type>ShowActionExpectation</type>
          <evaluationMessage>No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_7/scriptTable_30_0', instruction='call', instanceName='scriptTableActor', methodName='contentMatches', args=[class="ignore"&gt;Not Executed and should be ignored&lt;]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_7/scriptTable_30_0</instructionId>
          <type>EnsureActionExpectation</type>
          <evaluationMessage>No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_7/scriptTable_30_1', instruction='call', instanceName='scriptTableActor', methodName='extractMatch', args=[class="[^"]+"&gt;Not Executed and should be ignored&lt;, contents, 0]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_7/scriptTable_30_1</instructionId>
          <type>ShowActionExpectation</type>
          <evaluationMessage>No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_8/scriptTable_30_0', instruction='call', instanceName='scriptTableActor', methodName='contentMatches', args=[class="ignore"&gt;Not Executed and should be ignored as well&lt;]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_8/scriptTable_30_0</instructionId>
          <type>EnsureActionExpectation</type>
          <evaluationMessage>No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_8/scriptTable_30_1', instruction='call', instanceName='scriptTableActor', methodName='extractMatch', args=[class="[^"]+"&gt;Not Executed and should be ignored as well&lt;, contents, 0]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_8/scriptTable_30_1</instructionId>
          <type>ShowActionExpectation</type>
          <evaluationMessage>No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_9/scriptTable_30_0', instruction='call', instanceName='scriptTableActor', methodName='contentMatches', args=[class="ignore"&gt;Test not run&lt;]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_9/scriptTable_30_0</instructionId>
          <type>EnsureActionExpectation</type>
          <evaluationMessage>No Method contentMatches[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_9/scriptTable_30_1', instruction='call', instanceName='scriptTableActor', methodName='extractMatch', args=[class="[^"]+"&gt;Test not run&lt;, contents, 0]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_9/scriptTable_30_1</instructionId>
          <type>ShowActionExpectation</type>
          <evaluationMessage>No Method extractMatch[3] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_12/scriptTable_36_0', instruction='call', instanceName='scriptTableActor', methodName='requestPage', args=[Testpage?executionLog]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_12/scriptTable_36_0</instructionId>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>No Method requestPage[1] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='scriptTable_42_12/scriptTable_36_1', instruction='call', instanceName='scriptTableActor', methodName='content', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>scriptTable_42_12/scriptTable_36_1</instructionId>
          <type>ShowActionExpectation</type>
          <evaluationMessage>No Method content[0] in class fitnesse.fixtures.ResponseExaminer.
 Available methods:
ClearSymbols() -&gt; void
callParseMethod(java.lang.Class, java.lang.String) -&gt; class java.lang.Object
camel(java.lang.String) -&gt; class java.lang.String
check(fit.Parse, fit.TypeAdapter) -&gt; void
contents() -&gt; class java.lang.String
convertBreaksToLineSeparators(java.lang.String) -&gt; class java.lang.String
counts() -&gt; class java.lang.String
doCell(fit.Parse, int) -&gt; void
doCells(fit.Parse) -&gt; void
doRow(fit.Parse) -&gt; void
doRows(fit.Parse) -&gt; void
doTable(fit.Parse) -&gt; void
doTables(fit.Parse) -&gt; void
equals(java.lang.Object) -&gt; boolean
escape(java.lang.String) -&gt; class java.lang.String
escape(java.lang.String, char, java.lang.String) -&gt; class java.lang.String
exception(fit.Parse, java.lang.Throwable) -&gt; void
execute() -&gt; void
extractValueFromResponse() -&gt; void
found() -&gt; class java.lang.String
found(int) -&gt; class java.lang.String
fullContents() -&gt; class java.lang.String
getArgs() -&gt; class [Ljava.lang.String;
getArgsForTable(fit.Parse) -&gt; void
getClass() -&gt; class java.lang.Class
getSymbol(java.lang.String) -&gt; class java.lang.Object
getValue() -&gt; class java.lang.String
gray(java.lang.String) -&gt; class java.lang.String
handleBlankCell(fit.Parse, fit.TypeAdapter) -&gt; void
hasParseMethod(java.lang.Class) -&gt; boolean
hasSymbol(java.lang.String) -&gt; boolean
hashCode() -&gt; int
html() -&gt; class java.lang.String
ignore(fit.Parse) -&gt; void
inOrder() -&gt; boolean
isFriendlyException(java.lang.Throwable) -&gt; boolean
label(java.lang.String) -&gt; class java.lang.String
loadFixture(java.lang.String) -&gt; class fit.Fixture
matchCount() -&gt; int
matcher() -&gt; class java.util.regex.Matcher
matches() -&gt; boolean
notify() -&gt; void
notifyAll() -&gt; void
occursAfter() -&gt; boolean
parse(java.lang.String, java.lang.Class) -&gt; class java.lang.Object
reset() -&gt; void
right(fit.Parse) -&gt; void
setForcedAbort(boolean) -&gt; void
setGroup(int) -&gt; void
setLine(java.lang.String) -&gt; void
setNumber(int) -&gt; void
setPattern(java.lang.String) -&gt; void
setSymbol(java.lang.String, java.lang.Object) -&gt; void
setType(java.lang.String) -&gt; void
setValue(java.lang.String) -&gt; void
source() -&gt; class java.lang.String
string() -&gt; class java.lang.String
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
wrappedHtml() -&gt; class java.lang.String
wrong(fit.Parse) -&gt; void
wrong(fit.Parse, java.lang.String) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_43_0', instruction='make', instanceName='decisionTable_43', className='TearDown', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_43_0</instructionId>
          <type>ConstructionExpectation</type>
          <evaluationMessage>java.lang.NullPointerException</evaluationMessage>
        </expectation>
      </instructionResult>
    </instructions>
  </result>
  <finalCounts>
    <right>0</right>
    <wrong>0</wrong>
    <ignores>0</ignores>
    <exceptions>1</exceptions>
  </finalCounts>
  <totalRunTimeInMillis>28</totalRunTimeInMillis>
</testResults>

